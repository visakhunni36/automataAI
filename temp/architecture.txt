

Design the architecture
------------------------


Need more thoughts on the scaling part


						Docker(1-node) - Python - create rules
						Docker(2-nodes)- Celery - cron jobs
						Docker(4-nodes)- Spark Scala - all the stream and obeservers
Kubernets - 			Docker(2-nodes)- MySql(Scale) - the db
						Docker(2-nodes)- NoSQL(Scale) - the db
						Docker(2-nodes)- Redis Cache - cache
						Docker(1-node) - LogStash + ELastic Search - analytics
						Docker(1-node) - Python + Selenium - testing 



(i) Docker(1-node) - Python - create rules
-------------------------------------------
				directory structure

				public-
					- app.py
					- config.py
					- README.md
					- DOCKER
					- docker-compose.yml
					- requirements.txt
					- static
						- css
						- js
						- icons
						- images
					- templates
						- components
						- page_1
						- page_2
						- etc
					- controllers
						- page_controller_1
						- page_controller_2
						- etc
					- responses
						- page_response_1
						- page_response_2
						- etc
					- routes
						- page_router_1
						- page_router_2
						- etc
					- models
						- model_1
						- model_2
						- etc
					- assets
						- cronjobs
						- ml_pipeline
						- logging
					- core
						- controller
						- response
						- route
						- model
						- database
							- mysql_db
							- nosql
						- queries
						- workers
						- algorithsms
						- pipelines
						- authentication
						- watchdog
						- automation
							- preprocessor
							- rule_synthesizer
							- reconstructor
							- updater
						- tester
							- automation_rule_tester
							- data_pumping
							- UI_element_tester
							- sample_data
								- data.csv
						- cache
							- cache_cluster
							- cache_priority




(ii) Docker(2-nodes)- Celery - cron jobs
-----------------------------------------


(iii) Docker(4-nodes)- Spark Scala - all the stream and obeservers
-------------------------------------------------------------------


(iv) Docker(2-nodes)- MySql(Scale) - the db
--------------------------------------------


(v) Docker(2-nodes)- NoSQL(Scale) - the db
--------------------------------------------


(vi) Docker(2-nodes)- Redis Cache - cache
------------------------------------------


(vii) Docker(1-node) - LogStash + ELastic Search - analytics
-------------------------------------------------------------


(viii) Docker(1-node) - Python + Selenium - testing 
----------------------------------------------------






























































































































































































































































































































































